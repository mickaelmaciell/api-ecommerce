const swaggerJSDoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

// Defini칞칚o das configura칞칫es do Swagger
const options = {
  definition: {
    openapi: '3.0.0', // Vers칚o do OpenAPI
    info: {
      title: 'API Ecommerce', // T칤tulo da documenta칞칚o
      version: '1.0.0', // Vers칚o da API
      description: 'Documenta칞칚o da API Ecommerce', // Descri칞칚o da API
    },
    servers: [
      {
        url: 'http://localhost:3000', // URL do servidor
        description: 'Servidor local', // Descri칞칚o do servidor
      },
    ],
    components: {
      // Configura칞칚o de autentica칞칚o
      securitySchemes: {
        bearerAuth: {
          type: 'http', // Tipo de autentica칞칚o
          scheme: 'bearer', // Esquema usado
          bearerFormat: 'JWT', // Formato do token (JWT)
        },
      },
      // Defini칞칚o dos esquemas usados na API
      schemas: {
        User: {
          type: 'object',
          required: ['firstname', 'surname', 'email', 'password'], // Campos obrigat칩rios
          properties: {
            id: {
              type: 'integer',
              example: 1,
              description: 'ID do usu치rio (opcional, gerado automaticamente se n칚o fornecido)',
            },
            firstname: {
              type: 'string',
              example: 'Jo칚o',
              description: 'Primeiro nome do usu치rio',
            },
            surname: {
              type: 'string',
              example: 'Silva',
              description: 'Sobrenome do usu치rio',
            },
            email: {
              type: 'string',
              example: 'joao@mail.com',
              description: 'Email do usu치rio',
            },
            password: {
              type: 'string',
              example: '123@123',
              description: 'Senha do usu치rio',
            },
          },
        },
        Product: {
          type: 'object',
          required: ['name', 'price'], // Campos obrigat칩rios
          properties: {
            id: {
              type: 'integer',
              example: 1,
            },
            name: {
              type: 'string',
              example: 'T칡nis Esportivo',
              description: 'Nome do produto',
            },
            slug: {
              type: 'string',
              example: 'tenis-esportivo',
              description: 'Slug 칰nico para o produto',
            },
            description: {
              type: 'string',
              example: 'T칡nis ideal para corrida e academia.',
              description: 'Descri칞칚o do produto',
            },
            price: {
              type: 'number',
              example: 199.99,
              description: 'Pre칞o original do produto',
            },
            price_with_discount: {
              type: 'number',
              example: 159.99,
              description: 'Pre칞o com desconto do produto',
            },
            stock: {
              type: 'integer',
              example: 100,
              description: 'Quantidade dispon칤vel em estoque',
            },
            enabled: {
              type: 'boolean',
              example: true,
              description: 'Indica se o produto est치 ativo ou n칚o',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Data de cria칞칚o do produto',
            },
            updatedAt: {
              type: 'string',
              format: 'date-time',
              description: 'Data da 칰ltima atualiza칞칚o do produto',
            },
          },
        },
        Category: {
          type: 'object',
          required: ['name', 'slug'], // Campos obrigat칩rios
          properties: {
            id: {
              type: 'integer',
              example: 1,
            },
            name: {
              type: 'string',
              example: 'Eletr칪nicos',
              description: 'Nome da categoria',
            },
            slug: {
              type: 'string',
              example: 'eletronicos',
              description: 'Slug 칰nico para a categoria',
            },
            use_in_menu: {
              type: 'boolean',
              example: true,
              description: 'Indica se a categoria ser치 exibida no menu',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              example: '2024-12-22T10:00:00Z',
            },
            updatedAt: {
              type: 'string',
              format: 'date-time',
              example: '2024-12-22T11:00:00Z',
            },
          },
        },
        ProductImage: {
          type: 'object',
          required: ['product_id', 'path'], // Campos obrigat칩rios
          properties: {
            id: {
              type: 'integer',
              example: 1,
            },
            product_id: {
              type: 'integer',
              example: 101,
              description: 'ID do produto ao qual a imagem pertence',
            },
            path: {
              type: 'string',
              example: '/images/product1.jpg',
              description: 'Caminho da imagem do produto',
            },
            enabled: {
              type: 'boolean',
              example: true,
              description: 'Indica se a imagem est치 ativa',
            },
          },
        },
        ProductOption: {
          type: 'object',
          required: ['product_id', 'title', 'type', 'values'], // Campos obrigat칩rios
          properties: {
            id: {
              type: 'integer',
              example: 1,
            },
            product_id: {
              type: 'integer',
              example: 101,
              description: 'ID do produto ao qual a op칞칚o pertence',
            },
            title: {
              type: 'string',
              example: 'Cores dispon칤veis',
              description: 'T칤tulo da op칞칚o',
            },
            shape: {
              type: 'string',
              enum: ['square', 'circle'],
              example: 'circle',
              description: 'Forma da op칞칚o (quadrado ou c칤rculo)',
            },
            radius: {
              type: 'integer',
              example: 10,
              description: 'Raio da op칞칚o (caso aplic치vel)',
            },
            type: {
              type: 'string',
              enum: ['text', 'color'],
              example: 'color',
              description: 'Tipo da op칞칚o (texto ou cor)',
            },
            values: {
              type: 'string',
              example: 'Red,Blue,Green',
              description: 'Valores dispon칤veis para a op칞칚o',
            },
          },
        },
      },
    },
    security: [{ bearerAuth: [] }], // Exige autentica칞칚o com token
  },
  apis: ['./src/routes/*.js'], // Caminho para os arquivos de rotas onde est칚o os endpoints documentados
};

const swaggerSpec = swaggerJSDoc(options);

// Configura칞칚o para servir a documenta칞칚o no endpoint `/api/docs`
const setupSwaggerDocs = (app) => {
  app.use('/api/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));
  console.log('游늯 Documenta칞칚o dispon칤vel em http://localhost:3000/api/docs');
};

module.exports = setupSwaggerDocs;
